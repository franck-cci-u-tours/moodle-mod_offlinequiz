commit 71e179f3d4af18dec3f5e6460e871a00da5683fb
Author: franck <fasbjx@free.fr>
Date:   Mon Sep 19 11:53:42 2016 +0200

    A better integration of compatibles qtype -- Bumped version

diff --git a/classes/output/edit_renderer.php b/classes/output/edit_renderer.php
index 39e1219..d1a2944 100644
--- a/classes/output/edit_renderer.php
+++ b/classes/output/edit_renderer.php
@@ -123,7 +123,8 @@ class edit_renderer extends \plugin_renderer_base {
 
             // Include the question chooser.
             $output .= $this->question_chooser();
-            $this->page->requires->yui_module('moodle-mod_offlinequiz-questionchooser', 'M.mod_offlinequiz.init_questionchooser');
+            $this->page->requires->yui_module('moodle-mod_offlinequiz-questionchooser', 'M.mod_offlinequiz.init_questionchooser',
+                    [\mod_offlinequiz\qtype_enabled::instance()->get()]);
         }
 
         return $output;
diff --git a/classes/qtype_compatible.php b/classes/qtype_compatible.php
new file mode 100644
index 0000000..3d0f78e
--- /dev/null
+++ b/classes/qtype_compatible.php
@@ -0,0 +1,260 @@
+<?php
+
+/**
+ * Defines the offlinequiz qtype_compatible class
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_offlinequiz;
+
+/**
+ * Class qtype_compatible
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class qtype_compatible {
+
+    /** @var qtype_compatible singleton instance */
+    static private $instance = null;
+
+    /** @var string[] known compatible question types except description */
+    const KNOWN_COMPATIBLE_QTYPES = ['multichoice' => 'singlemulti', 'multichoiceset' => 'multi'];
+
+    /** @var  string[] installed compatible question types */
+    private $compatible_qtypes;
+
+    /**
+     * Initialize the single instance if needed and return it
+     *
+     * @return qtype_compatible the single instance
+     */
+    static public function instance() {
+
+        if (is_null(self::$instance)) {
+
+            self::$instance = new qtype_compatible();
+        }
+
+        return self::$instance;
+    }
+
+    /**
+     * Get the compatible qtypes
+     *
+     * @return \string[]
+     */
+    public function get() {
+
+        return $this->compatible_qtypes;
+    }
+
+    /**
+     * Is a qtype known to be compatible?
+     *
+     * @param $qtype
+     *
+     * @return bool
+     */
+    public static function is_known($qtype) {
+
+        return array_key_exists($qtype, self::KNOWN_COMPATIBLE_QTYPES);
+    }
+
+    private function __construct() {
+
+        global $CFG;
+
+        $question_path = $CFG->dirroot . '/question/type/';
+        include_once $question_path . 'multichoice/question.php';
+
+        $string_manager = get_string_manager();
+        $compatible_qtypes = &$this->compatible_qtypes;
+        foreach (\core_plugin_manager::instance()->get_enabled_plugins('qtype') as $qtype) {
+
+            if (self::is_known($qtype)) {
+
+                $compatible_qtypes[$qtype] = self::KNOWN_COMPATIBLE_QTYPES[$qtype];
+
+            } elseif (!is_null($configuration = $this->configuration($question_path, $qtype, $string_manager))) {
+
+                $compatible_qtypes[$qtype] = $configuration;
+            }
+        }
+    }
+
+    /**
+     * Find out if a question type is configured
+     *
+     * A question type is configured iif:
+     * -- either it defines the string with key 'offlinequiz_info' and the 'qtype_{question type name}_question' class which derives
+     * from one of 'qtype_multichoice_single_question' and 'qtype_multichoice_multi_question' classes;
+     * -- or it defines the string with key 'offlinequiz_single_info' and the 'qtype_{question type name}_single_question' class
+     * which derives from 'qtype_multichoice_single_question' class or (inclusive) it defines the string with key
+     * 'offlinequiz_multi_info' and the 'qtype_{question type name}_multi_question' class which derives from
+     * 'qtype_multichoice_multi_question' class.
+     *
+     * @param $question_path
+     * @param $qtype
+     * @param $string_manager
+     * @return null|string null, if it is not configured; one of single, multi and singlemulti if it is
+     */
+    private function configuration($question_path, $qtype, $string_manager) {
+
+        // *REQUIRED*
+        global $CFG;
+
+        $question_filename = $question_path . $qtype . '/question.php';
+        if (file_exists($question_filename)) {
+
+            include_once $question_filename;
+
+            $component = 'qtype_' . $qtype;
+
+            if (class_exists($class_name = $component . '_question')) {
+
+                return $this->question_class_configuration(new \ReflectionClass($class_name), $component, $string_manager);
+            }
+
+            $single = ($single_exists = class_exists($class_name = $component . '_single_question'))
+            && $this->question_class_configuration_single(new \ReflectionClass($class_name), $component, $string_manager) ?
+                    'single' : null;
+            $multi = ($multi_exists = class_exists($class_name = $component . '_multi_question'))
+            && $this->question_class_configuration_multi(new \ReflectionClass($class_name), $component, $string_manager) ?
+                    'multi' : null;
+
+            // Sanity check
+            if (($single && !$multi && ($this->is_configured_multi($component, $string_manager) || $multi_exists))
+                    || ($multi && !$single && ($this->is_configured_single($component, $string_manager) || $single_exists))
+            ) {
+
+                $this->misconfigured($component);
+            }
+
+            return ($result = $single . $multi) ? $result : null;
+        }
+
+        return null;
+    }
+
+    /**
+     * @param \ReflectionClass $class
+     * @param $component
+     * @param \core_string_manager $string_manager
+     * @return null|string
+     */
+    private function question_class_configuration(\ReflectionClass $class, $component, \core_string_manager $string_manager) {
+
+        if ($configured = $this->is_configured($component, $string_manager)) {
+
+            $single = $class->isSubclassOf('qtype_multichoice_single_question') ? 'single' : null;
+            $multi = $class->isSubclassOf('qtype_multichoice_multi_question') ? 'multi' : null;
+        }
+
+        // Sanity check
+        if (($this->is_configured_single($component, $string_manager) || $this->is_configured_multi($component, $string_manager))
+                || ($configured && !($single || $multi))
+        ) {
+
+            $this->misconfigured($component);
+        }
+
+        return $configured ? $single . $multi : null;
+    }
+
+    /**
+     * @param \ReflectionClass $class
+     * @param string $component
+     * @param \core_string_manager $string_manager
+     *
+     * @return string
+     */
+    private function question_class_configuration_single(\ReflectionClass $class, $component,
+            \core_string_manager $string_manager) {
+
+        $single = ($configured_single = $this->is_configured_single($component, $string_manager)) &&
+        $class->isSubclassOf('qtype_multichoice_single_question') ? 'single' : null;
+
+        // Sanity check
+        if ($this->is_configured($component, $string_manager) || ($configured_single && !$single)) {
+
+            $this->misconfigured($component);
+        }
+
+        return $single;
+    }
+
+    /**
+     * @param \ReflectionClass $class
+     * @param string $component
+     * @param \core_string_manager $string_manager
+     *
+     * @return string
+     */
+    private function question_class_configuration_multi(\ReflectionClass $class, $component, \core_string_manager $string_manager) {
+
+        $multi = ($configured_multi = $this->is_configured_multi($component, $string_manager))
+        && $class->isSubclassOf('qtype_multichoice_multi_question') ? 'multi' : null;
+
+        // Sanity check
+        if ($this->is_configured($component, $string_manager) || ($configured_multi && !$multi)) {
+
+            $this->misconfigured($component);
+        }
+
+        return $multi;
+    }
+
+    /**
+     * @param string $component
+     * @param \core_string_manager $string_manager
+     *
+     * @return bool
+     */
+    private function is_configured($component, \core_string_manager $string_manager) {
+
+        return $string_manager->string_exists('offlinequiz_info', $component);
+    }
+
+    /**
+     * @param string $component
+     * @param \core_string_manager $string_manager
+     *
+     * @return bool
+     */
+    private function is_configured_single($component, \core_string_manager $string_manager) {
+
+        return $string_manager->string_exists('offlinequiz_single_info', $component);
+    }
+
+    /**
+     * @param string $component
+     * @param \core_string_manager $string_manager
+     *
+     * @return bool
+     */
+    private function is_configured_multi($component, \core_string_manager $string_manager) {
+
+        return $string_manager->string_exists('offlinequiz_multi_info', $component);
+    }
+
+    /**
+     * A misconfigured qtype was found, state it
+     *
+     * @param string $component
+     */
+    private function misconfigured($component) {
+
+        print_error('qtype_misconfigured', 'quizoffline', '', $component);
+    }
+}
diff --git a/classes/qtype_enabled.php b/classes/qtype_enabled.php
new file mode 100644
index 0000000..a6c2e73
--- /dev/null
+++ b/classes/qtype_enabled.php
@@ -0,0 +1,101 @@
+<?php
+
+/**
+ * Defines the offlinequiz qtype_enabled class
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_offlinequiz;
+
+/**
+ * Class qtype_enabled
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class qtype_enabled {
+
+    /** @var qtype_enabled singleton instance */
+    static private $instance = null;
+
+    /** @var [string] compatibles and enabled question types */
+    private $enabled_qtypes;
+
+    /**
+     * Initialize the single instance if needed and return it
+     *
+     * @return qtype_compatible the single instance
+     */
+    static public function instance() {
+
+        if (is_null(self::$instance)) {
+
+            self::$instance = new qtype_enabled();
+        }
+
+        return self::$instance;
+    }
+
+    /**
+     * Get the enabled qtypes
+     *
+     * @return string[]
+     */
+    public function get() {
+
+        return $this->enabled_qtypes;
+    }
+
+    /**
+     * Is a qtype enabled?
+     *
+     * @param $qtype the qtype to test
+     *
+     * @return bool
+     */
+    public function is_enabled($qtype) {
+
+        return in_array($qtype, $this->get());
+    }
+
+    /**
+     * Is a qtype the description qtype or enabled?
+     *
+     * @param $qtype the qtype to test
+     *
+     * @return bool
+     */
+    public function is_description_or_enabled($qtype) {
+
+        return $qtype == 'description' || $this->is_enabled($qtype);
+    }
+
+    private function __construct() {
+
+        global $DB;
+
+        // Sanity check. At least one compatible question type *has* to be enabled
+        if (empty(qtype_compatible::instance()->get())) {
+
+            print_error('error', 'offlinequiz');
+        }
+
+        $this->enabled_qtypes = array_map(
+                function($name) {
+
+                    return substr($name, 7);
+                },
+                $DB->get_fieldset_select('config_plugins', 'name',
+                        'plugin = \'offlinequiz\' AND name LIKE \'enable_%\' AND value != \'0\''));
+    }
+}
diff --git a/classes/question/bank/custom_view.php b/classes/question/bank/custom_view.php
index 70acf98..970f22b 100644
--- a/classes/question/bank/custom_view.php
+++ b/classes/question/bank/custom_view.php
@@ -293,7 +293,7 @@ class custom_view extends \core_question\bank\view {
         // Build the SQL.
         $sql = ' FROM {question} q ' . implode(' ', $joins);
         $sql .= ' WHERE ' . implode(' AND ', $tests);
-        $sql .= '   AND q.qtype IN (\'multichoice\', \'multichoiceset\', \'description\') ';
+        $sql .= ' AND q.qtype IN (\'description\', \'' . implode('\', \'', \mod_offlinequiz\qtype_enabled::instance()->get()) . '\') ';
         $this->countsql = 'SELECT count(1)' . $sql;
         $this->loadsql = 'SELECT ' . implode(', ', $fields) . $sql . ' ORDER BY ' . implode(', ', $sorts);
     }
diff --git a/classes/question_info.php b/classes/question_info.php
new file mode 100644
index 0000000..c87b5c6
--- /dev/null
+++ b/classes/question_info.php
@@ -0,0 +1,36 @@
+<?php
+
+/**
+ * Defines the question_info interface
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_offlinequiz;
+
+/**
+ * Interface question_info
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+interface question_info {
+
+    /**
+     * Get the question info string of a question
+     *
+     * @param object $question the question
+     *
+     * @return string the info string
+     */
+    public function get($question);
+}
diff --git a/classes/question_info_answers.php b/classes/question_info_answers.php
new file mode 100644
index 0000000..2f7a6eb
--- /dev/null
+++ b/classes/question_info_answers.php
@@ -0,0 +1,36 @@
+<?php
+
+/**
+ * Defines the question_info_answers class
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_offlinequiz;
+
+/**
+ * Class question_info_answers
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class question_info_answers implements question_info {
+
+    /**
+     * @inheritDoc
+     */
+    public function get($question) {
+
+        return get_string($amount = offlinequiz_get_amount_correct_answers($question) == 1 ?
+                'questioninfocorrectanswer' : 'questioninfocorrectanswers', 'offlinequiz', $amount);
+    }
+}
diff --git a/classes/question_info_brackets.php b/classes/question_info_brackets.php
new file mode 100644
index 0000000..e50178c
--- /dev/null
+++ b/classes/question_info_brackets.php
@@ -0,0 +1,56 @@
+<?php
+
+/**
+ * Defines the question_info_brackets class
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_offlinequiz;
+
+/**
+ * Class question_info_brackets
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class question_info_brackets extends question_info_decorator {
+
+    /** @var string open bracket */
+    private $open;
+
+    /** @var string close bracket */
+    private $close;
+
+    /**
+     * question_info_brackets constructor
+     *
+     * @param string $open open bracket
+     * @param question_info $question_info
+     * @param string $close close bracket
+     */
+    public function __construct($open, question_info $question_info, $close) {
+
+        parent::__construct($question_info);
+
+        $this->open = $open;
+        $this->close = $close;
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public function get($question) {
+
+        return $this->open . $this->question_info->get($question) . $this->close;
+    }
+}
diff --git a/classes/question_info_decorator.php b/classes/question_info_decorator.php
new file mode 100644
index 0000000..d399edf
--- /dev/null
+++ b/classes/question_info_decorator.php
@@ -0,0 +1,45 @@
+<?php
+
+/**
+ * Defines the question_info_decorator abstract class
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_offlinequiz;
+
+/**
+ * Class question_info_decorator, base of the decorator
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+abstract class question_info_decorator implements question_info {
+
+    /** @var question_info */
+    protected $question_info;
+
+    /**
+     * question_info_decorator constructor
+     *
+     * @param question_info $question_info what to decorate
+     */
+    public function __construct(question_info $question_info) {
+
+        $this->question_info = $question_info;
+    }
+
+    /**
+     * @inheritDoc
+     */
+    abstract public function get($question);
+}
diff --git a/classes/question_info_factory.php b/classes/question_info_factory.php
new file mode 100644
index 0000000..6f1110b
--- /dev/null
+++ b/classes/question_info_factory.php
@@ -0,0 +1,71 @@
+<?php
+
+/**
+ * Defines the question_info_factory class
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_offlinequiz;
+
+/**
+ * Class question_info_factory
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class question_info_factory {
+
+    const LIST_SEPARATOR = ', ';
+
+    const OPEN_BRACKET = '(';
+    const CLOSE_BRACKET = ')';
+
+    /**
+     * @param object $offlinequiz
+     */
+    public static function get($offlinequiz) {
+
+        $list = [];
+        switch ($offlinequiz->showquestioninfo) {
+
+            case OFFLINEQUIZ_QUESTIONINFO_QTYPE:
+                $list[] = new question_info_qtype();
+                break;
+
+            case OFFLINEQUIZ_QUESTIONINFO_ANSWERS:
+                $list[] = new question_info_answers();
+                break;
+
+            default:
+                throw new \ErrorException('You found a bug'); // Never reached
+        }
+
+        if ($offlinequiz->showgrades) {
+
+            $list[] = new question_info_grade($offlinequiz->decimalpoints);
+        }
+
+        if (is_null($info = array_shift($list))) {
+
+            // Another option is to return null and have the caller test the result
+            return new question_info_nop();
+        }
+
+        while ($list) {
+
+            $info = new question_info_list($info, self::LIST_SEPARATOR, array_shift($list));
+        }
+
+        return new question_info_brackets(self::OPEN_BRACKET, $info, self::CLOSE_BRACKET);
+    }
+}
diff --git a/classes/question_info_grade.php b/classes/question_info_grade.php
new file mode 100644
index 0000000..4938a6d
--- /dev/null
+++ b/classes/question_info_grade.php
@@ -0,0 +1,49 @@
+<?php
+
+/**
+ * Defines the question_info_grade class
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_offlinequiz;
+
+/**
+ * Class question_info_grade
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class question_info_grade implements question_info {
+
+    /** @var integer how many decimals */
+    private $decimal_points;
+
+    /**
+     * question_info_grade constructor
+     *
+     * @param integer $decimal_points
+     */
+    public function __construct($decimal_points) {
+
+        $this->decimal_points = $decimal_points;
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public function get($question) {
+
+        return format_float($question->maxmark, $this->decimal_points) . ' '
+        . ($question->maxmark == 1 ? get_string('point', 'offlinequiz') : get_string('points', 'grades'));
+    }
+}
diff --git a/classes/question_info_list.php b/classes/question_info_list.php
new file mode 100644
index 0000000..be4eedd
--- /dev/null
+++ b/classes/question_info_list.php
@@ -0,0 +1,56 @@
+<?php
+
+/**
+ * Defines the question_info_list class
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_offlinequiz;
+
+/**
+ * Class question_info_list
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class question_info_list extends question_info_decorator {
+
+    /** @var string separator of the list */
+    private $separator;
+
+    /** @var question_info tail of the list */
+    private $tail;
+
+    /**
+     * question_info_list constructor
+     *
+     * @param question_info $head head of the list
+     * @param string $separator list separator of the list
+     * @param question_info $tail tail of the list
+     */
+    public function __construct(question_info $head, $separator, question_info $tail) {
+
+        parent::__construct($head);
+
+        $this->separator = $separator;
+        $this->tail = $tail;
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public function get($question) {
+
+        return $this->question_info->get($question) . $this->separator . $this->tail->get($question);
+    }
+}
diff --git a/classes/question_info_nop.php b/classes/question_info_nop.php
new file mode 100644
index 0000000..9070772
--- /dev/null
+++ b/classes/question_info_nop.php
@@ -0,0 +1,35 @@
+<?php
+
+/**
+ * Defines the question_info_nop class
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_offlinequiz;
+
+/**
+ * Class question_info_nop
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class question_info_nop implements question_info {
+
+    /**
+     * @inheritDoc
+     */
+    public function get($question = null) {
+
+        return '';
+    }
+}
diff --git a/classes/question_info_qtype.php b/classes/question_info_qtype.php
new file mode 100644
index 0000000..16caaac
--- /dev/null
+++ b/classes/question_info_qtype.php
@@ -0,0 +1,46 @@
+<?php
+
+/**
+ * Defines the question_info_qtype class
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_offlinequiz;
+
+/**
+ * Class question_info_qtype
+ *
+ * @package       mod
+ * @subpackage    offlinequiz
+ * @author        Franck Branjonneau
+ * @copyright     Université de Tours
+ * @since         Moodle 3.1
+ * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class question_info_qtype implements question_info {
+
+    /**
+     * @inheritDoc
+     */
+    public function get($question) {
+
+        $is_known = qtype_compatible::is_known($qtype = $question->qtype);
+
+        $component = $is_known ? 'offlinequiz' : 'qtype_' . $qtype;
+
+        $prefix = $is_known ? $qtype . '_' : 'offlinequiz_';
+        // TODO use qtype_enabled -- Franck
+        if (get_config('offlinequiz', 'enable_' . $qtype) == 'singlemulti') {
+
+            $prefix .= $question->options->single ? 'single_' : 'multi_';
+        }
+
+        return get_string($prefix . 'info', $component);
+    }
+}
diff --git a/createquiz.php b/createquiz.php
index e9b3944..66eba5c 100644
--- a/createquiz.php
+++ b/createquiz.php
@@ -281,7 +281,7 @@ if ($mode == 'preview') {
                     $currentpage++;
                 }
                 $order = array();
-                if ($question->qtype == 'multichoice' || $question->qtype == 'multichoiceset') {
+                if (\mod_offlinequiz\qtype_enabled::instance()->is_enabled($question->qtype)) {
                     $slot = $questionslots[$question->id];
                     $slotquestion = $templateusage->get_question($slot);
                     $attempt = $templateusage->get_question_attempt($slot);
diff --git a/documentlib.php b/documentlib.php
index 35a302b..0b99f78 100644
--- a/documentlib.php
+++ b/documentlib.php
@@ -27,56 +27,17 @@
 
 defined('MOODLE_INTERNAL') || die();
 
+/**
+ * Get the question info string parametrized by offlinequiz for the given question
+ *
+ * @param object $offlinequiz the offline quiz
+ * @param object $question the question
+ *
+ * @return string the info string
+ */
 function offlinequiz_get_question_infostring($offlinequiz, $question) {
-    if ($offlinequiz->showgrades || $offlinequiz->showquestioninfo) {
-        $infostr = '(';
-        $questioninfo = offlinequiz_get_questioninfo($offlinequiz, $question);
-        if ($questioninfo) {
-            $infostr .= $questioninfo;
-            if ($offlinequiz->showgrades) {
-                $infostr .= ', ';
-            }
-        }
-
-        if ($offlinequiz->showgrades) {
-            $pointstr = get_string('points', 'grades');
-            if ($question->maxmark == 1) {
-                $pointstr = get_string('point', 'offlinequiz');
-            }
-            $infostr = $infostr . format_float($question->maxmark, $offlinequiz->decimalpoints) . ' '. $pointstr;
-        }
-
-        $infostr = $infostr . ')';
-        return  $infostr;
 
-    }
-    return null;
-}
-
-function offlinequiz_get_questioninfo($offlinequiz, $question) {
-    if ($offlinequiz->showquestioninfo == OFFLINEQUIZ_QUESTIONINFO_QTYPE) {
-        if ($question->qtype == 'multichoice') {
-
-            if ($question->options->single) {
-                $questioninfo = get_string('singlechoice', 'offlinequiz');
-            } else {
-                $questioninfo = get_string('multichoice', 'offlinequiz');
-            }
-        } else if ($question->qtype == 'multichoiceset') {
-            $questioninfo = get_string('allornothing', 'offlinequiz');
-        }
-        return $questioninfo;
-
-    } else if ($offlinequiz->showquestioninfo == OFFLINEQUIZ_QUESTIONINFO_ANSWERS) {
-        $amount = offlinequiz_get_amount_correct_answers($question);
-        $questioninfo = $amount . ' ' . get_string('questioninfocorrectanswers', 'offlinequiz');
-        if ($amount == 1) {
-            $questioninfo = $amount . ' ' . get_string('questioninfocorrectanswer', 'offlinequiz', $amount);
-        }
-        return $questioninfo;
-    } else {
-        return null;
-    }
+    return \mod_offlinequiz\question_info_factory::get($offlinequiz)->get($question);
 }
 
 function offlinequiz_get_amount_correct_answers($question) {
diff --git a/docxlib.php b/docxlib.php
index dd217be..b9e416e 100644
--- a/docxlib.php
+++ b/docxlib.php
@@ -578,7 +578,7 @@ function offlinequiz_create_docx_question(question_usage_by_activity $templateus
             ));
             $docx->addNumbering($answernumbering);
 
-            if ($question->qtype == 'multichoice' || $question->qtype == 'multichoiceset') {
+            if (\mod_offlinequiz\qtype_enabled::instance()->is_enabled_qtype($question->qtype)) {
 
                 // There is only a slot for multichoice questions.
                 $attempt = $templateusage->get_question_attempt($slot);
@@ -671,7 +671,7 @@ function offlinequiz_create_docx_question(question_usage_by_activity $templateus
             ));
             $docx->addNumbering($answernumbering);
 
-            if ($question->qtype == 'multichoice' || $question->qtype == 'multichoiceset') {
+            if (\mod_offlinequiz\qtype_enabled::instance()->is_enabled($question->qtype)) {
 
                 $slot = $questionslots[$question->id];
 
diff --git a/lang/en/offlinequiz.php b/lang/en/offlinequiz.php
index 86f305e..14ff788 100644
--- a/lang/en/offlinequiz.php
+++ b/lang/en/offlinequiz.php
@@ -48,12 +48,12 @@ $string['addrandomquestion'] = 'questions randomly';
 $string['addrandomquestiontoofflinequiz'] = 'Adding questions to offlinequiz {$a->name} (group {$a->group})';
 $string['addrandomquestiontopage'] = 'Add a random question to page {$a}';
 $string['addarandomquestion'] = 'questions randomly';
-$string['addarandomquestion_help'] = 'Moodle adds a random selection of multiple choice questions (or all-or-nothing multiple-choice questions) to the current offline quiz group. The number of questions added can be set. The questions are chosen from the current question category (and, if selected, its sub-categories).';
+$string['addarandomquestion_help'] = 'Moodle adds a random selection of multiple choice questions type to the current offline quiz group. The number of questions added can be set. The questions are chosen from the current question category (and, if selected, its sub-categories).';
 $string['addtoofflinequiz'] = 'Add to offline quiz';
 $string['addtoqueue'] = 'Add to queue';
 $string['allinone'] = 'Unlimited';
 $string['alllists'] = 'All lists';
-$string['allornothing'] = 'All-or-nothing';
+$string['multichoiceset_info'] = 'All-or-nothing';
 $string['allresults'] = 'Show all results';
 $string['allstudents'] = 'Show all students';
 $string['alwaysavailable'] = 'Always available';
@@ -303,7 +303,7 @@ The offline quizzes can be downloaded as PDF files. The students mark their answ
 $string['moveselectedonpage'] = 'Move selected questions to page: {$a}';
 $string['copyselectedtogroup'] = 'Add selected questions to group: {$a}';
 $string['copytogroup'] = 'Add all questions to group: {$a}';
-$string['multichoice'] = 'Multiple choice';
+$string['multichoice_multi_info']='Multiple choice';
 $string['multipleanswers'] = 'Choose at least one answer.';
 $string['moodleprocessing'] = 'Let Moodle process data';
 $string['movecorners'] = 'Change the positions of the corner markings first. Use drag and drop.';
@@ -431,8 +431,8 @@ $string['questionanalysistitle'] = 'Difficulty Analysis Table';
 $string['questionbankcontents'] = 'Question bank contents';
 $string['questionforms'] = 'Question forms';
 $string['questioninfoanswers'] = 'Number of correct answers';
-$string['questioninfocorrectanswer'] = 'correct answer';
-$string['questioninfocorrectanswers'] = 'correct answers';
+$string['questioninfocorrectanswer'] = '{$a} correct answer';
+$string['questioninfocorrectanswers'] = '{$a} correct answers';
 $string['questioninfonone'] = 'Nothing';
 $string['questioninfoqtype'] = 'Question type';
 $string['questionname'] = 'Question name';
@@ -607,7 +607,7 @@ $string['showquestioninfo_help'] = 'With this option you can control, which addi
 You can choose one of these:
 <ul>
 <li> Nothing
-<li> Question type - Depending on question type Single-Choice, Multiple-Choice, All-or-Nothing Multiple-Choice will be printed
+<li> Question type - Depending on question type a type info string will be printed
 <li> Number of correct answers - The number of correct answers will be printed
 </ul>';
 $string['showstudentview'] = 'Show student view';
@@ -624,7 +624,7 @@ $string['shufflequestionsselected'] = 'Shuffle questions has been set, so some a
 $string['shufflewithin'] = 'Shuffle within questions';
 $string['shufflewithin_help'] = 'If enabled, the parts making up each question will be randomly shuffled each time you press the reload button in the form preview. NOTE: This setting only applies to questions that have the shuffeling option activated.';
 $string['signature'] = 'Signature';
-$string['singlechoice'] = 'Single choice';
+$string['multichoice_single_info']='Single choice';
 $string['standard'] = 'Standard';
 $string['starttutorial'] = 'Start tutorial about the examination';
 $string['statistics'] = 'Statistics';
@@ -665,3 +665,7 @@ $string['withselected'] = 'With selected...';
 $string['zipfile'] = 'ZIP file';
 $string['zipok'] = 'ZIP file imported';
 $string['zerogradewarning'] = 'Warning: Your offline quiz grade is 0.0!';
+
+$string['enable_qtypes_heading']='Question types options';
+$string['enable_qtype']= 'Enable {$a}';
+$string['enable_qtype_description']='Do you want to enable {$a} questions in Offline Quizzes?';
diff --git a/latexlib.php b/latexlib.php
index 8918b00..aaa676e 100644
--- a/latexlib.php
+++ b/latexlib.php
@@ -102,7 +102,7 @@ function offlinequiz_create_latex_question(question_usage_by_activity $templateu
 
             $latexforquestions .= '\item ' .  $questiontext . "\n";
 
-            if ($question->qtype == 'multichoice' || $question->qtype == 'multichoiceset') {
+            if (\mod_offlinequiz\qtype_enabled::instance()->is_enabled_qtype($question->qtype)) {
 
                 // There is only a slot for multichoice questions.
                 $attempt = $templateusage->get_question_attempt($slot);
@@ -143,7 +143,7 @@ function offlinequiz_create_latex_question(question_usage_by_activity $templateu
             } else {
                 $latexforquestions .= '\item ' .  $questiontext . "\n";
             }
-            if ($question->qtype == 'multichoice' || $question->qtype == 'multichoiceset') {
+            if (\mod_offlinequiz\qtype_enabled::instance()->is_enabled($question->qtype)) {
 
                 $slot = $questionslots[$currentquestionid];
 
diff --git a/locallib.php b/locallib.php
index 8b36157..7466744 100644
--- a/locallib.php
+++ b/locallib.php
@@ -87,7 +87,7 @@ class offlinequiz_question_usage_by_activity extends question_usage_by_activity
 
             // We have to check for the type because we might have old migrated templates
             // that could contain description questions.
-            if ($slotquestion->get_type_name() == 'multichoice' || $slotquestion->get_type_name() == 'multichoiceset') {
+            if (\mod_offlinequiz\qtype_enabled::instance()->is_enabled($slotquestion->get_type_name())) {
                 $order = $slotquestion->get_order($attempt);  // Order of the answers.
                 $order = implode(',', $order);
                 $newslot = $newquba->add_question($slotquestion, $qinstances[$slotquestion->id]->maxmark);
@@ -1409,7 +1409,7 @@ function offlinequiz_get_group_template_usage($offlinequiz, $group, $context) {
                 $question = question_bank::make_question($questiondata[$questionid]);
 
                 // We only add multichoice questions which are needed for grading.
-                if ($question->get_type_name() == 'multichoice' || $question->get_type_name() == 'multichoiceset') {
+                if (\mod_offlinequiz\qtype_enabled::instance()->is_enabled($question->get_type_name())) {
                     $templateusage->add_question($question, $groupquestions[$question->id]->maxmark);
                 }
             }
@@ -2192,12 +2192,12 @@ function offlinequiz_add_random_questions($offlinequiz, $offlinegroup, $category
 
     list($qcsql, $qcparams) = $DB->get_in_or_equal($categoryids, SQL_PARAMS_NAMED, 'qc');
 
-    $sql = "SELECT id
+    $sql = 'SELECT id
               FROM {question} q
-             WHERE q.category $qcsql
-               AND q.parent = 0
+             WHERE q.category ' . $qcsql . ' '
+            . 'AND q.parent = 0
                AND q.hidden = 0
-               AND q.qtype IN ('multichoice', 'multichoiceset') ";
+               AND q.qtype IN (\'' . implode('\', \'', \mod_offlinequiz\qtype_enabled::instance()->get()) . '\') ';
     if (!$preventsamequestion) {
         // Find all questions in the selected categories that are not in the offline group yet.
         $sql .= "AND NOT EXISTS (SELECT 1
diff --git a/pdflib.php b/pdflib.php
index 59fa2db..34653ee 100644
--- a/pdflib.php
+++ b/pdflib.php
@@ -573,7 +573,7 @@ function offlinequiz_create_pdf_question(question_usage_by_activity $templateusa
             $html = '';
 
             $html .= $questiontext . '<br/><br/>';
-            if ($question->qtype == 'multichoice' || $question->qtype == 'multichoiceset') {
+            if (\mod_offlinequiz\qtype_enabled::instance()->is_enabled($question->qtype)) {
 
                 // There is only a slot for multichoice questions.
                 $attempt = $templateusage->get_question_attempt($slot);
@@ -623,7 +623,7 @@ function offlinequiz_create_pdf_question(question_usage_by_activity $templateusa
             }
 
             // Finally print the question number and the HTML string.
-            if ($question->qtype == 'multichoice' || $question->qtype == 'multichoiceset') {
+            if (\mod_offlinequiz\qtype_enabled::instance()->is_enabled($question->qtype)) {
                 $pdf->SetFont('FreeSans', 'B', $offlinequiz->fontsize);
                 $pdf->Cell(4, round($offlinequiz->fontsize / 2), "$number)  ", 0, 0, 'R');
                 $pdf->SetFont('FreeSans', '', $offlinequiz->fontsize);
@@ -638,7 +638,7 @@ function offlinequiz_create_pdf_question(question_usage_by_activity $templateusa
                 $pdf->Ln(14);
 
                 // Print the question number and the HTML string again on the new page.
-                if ($question->qtype == 'multichoice' || $question->qtype == 'multichoiceset') {
+                if (\mod_offlinequiz\qtype_enabled::instance()->is_enabled($question->qtype)) {
                     $pdf->SetFont('FreeSans', 'B', $offlinequiz->fontsize);
                     $pdf->Cell(4, round($offlinequiz->fontsize / 2), "$number)  ", 0, 0, 'R');
                     $pdf->SetFont('FreeSans', '', $offlinequiz->fontsize);
@@ -704,7 +704,7 @@ function offlinequiz_create_pdf_question(question_usage_by_activity $templateusa
             $html = '';
 
             $html .= $questiontext . '<br/><br/>';
-            if ($question->qtype == 'multichoice' || $question->qtype == 'multichoiceset') {
+            if (\mod_offlinequiz\qtype_enabled::instance()->is_enabled($question->qtype)) {
 
                 $slot = $questionslots[$currentquestionid];
 
@@ -755,7 +755,7 @@ function offlinequiz_create_pdf_question(question_usage_by_activity $templateusa
             }
 
             // Finally print the question number and the HTML string.
-            if ($question->qtype == 'multichoice' || $question->qtype == 'multichoiceset') {
+            if (\mod_offlinequiz\qtype_enabled::instance()->is_enabled($question->qtype)) {
                 $pdf->SetFont ( 'FreeSans', 'B', $offlinequiz->fontsize );
                 $pdf->Cell ( 4, round ( $offlinequiz->fontsize / 2 ), "$number)  ", 0, 0, 'R' );
                 $pdf->SetFont ( 'FreeSans', '', $offlinequiz->fontsize );
@@ -770,7 +770,7 @@ function offlinequiz_create_pdf_question(question_usage_by_activity $templateusa
                 $pdf->Ln ( 14 );
 
                 // Print the question number and the HTML string again on the new page.
-                if ($question->qtype == 'multichoice' || $question->qtype == 'multichoiceset') {
+                if (\mod_offlinequiz\qtype_enabled::instance()->is_enabled($question->qtype)) {
                     $pdf->SetFont ( 'FreeSans', 'B', $offlinequiz->fontsize );
                     $pdf->Cell ( 4, round ( $offlinequiz->fontsize / 2 ), "$number)  ", 0, 0, 'R' );
                     $pdf->SetFont ( 'FreeSans', '', $offlinequiz->fontsize );
@@ -921,7 +921,7 @@ function offlinequiz_create_pdf_answer($maxanswers, $templateusage, $offlinequiz
         $question = $questions[$currentquestionid];
 
         // Only look at multichoice questions.
-        if ($question->qtype != 'multichoice' && $question->qtype != 'multichoiceset') {
+        if (!\mod_offlinequiz\qtype_enabled::instance()->is_enabled($question->qtype)) {
             continue;
         }
 
diff --git a/report/overview/report.php b/report/overview/report.php
index 582b273..d00d0da 100644
--- a/report/overview/report.php
+++ b/report/overview/report.php
@@ -374,7 +374,7 @@ class offlinequiz_overview_report extends offlinequiz_default_report {
                     foreach ($slots as $slot) {
                         $slotquestion = $quba->get_question($slot);
                         $qtype = $slotquestion->get_type_name();
-                        if ($qtype == 'multichoice' || $qtype == 'multichoiceset') {
+                        if (\mod_offlinequiz\qtype_enabled::instance()->is_enabled_qtype($question->qtype)) {
                             $attempt = $quba->get_question_attempt($slot);
                             $order = $slotquestion->get_order($attempt); // Order of the answers.
                             $tempstr = ",";
diff --git a/settings.php b/settings.php
index 4a3c3b9..8c1632a 100644
--- a/settings.php
+++ b/settings.php
@@ -133,4 +133,15 @@ if ($ADMIN->fulltree) {
 
     $settings->add(new admin_setting_configtext('offlinequiz/keepfilesfordays', get_string('keepfilesfordays', 'offlinequiz'),
             get_string('configkeepfilesfordays', 'offlinequiz'), 8, PARAM_INT));
+
+    // Configure compatible modules
+    $settings->add(new admin_setting_heading('offlinequiz/enable_qtypes',
+            get_string('enable_qtypes_heading', 'offlinequiz'), null));
+
+    foreach (\mod_offlinequiz\qtype_compatible::instance()->get() as $qtype => $configuration) {
+
+        $settings->add(new admin_setting_configcheckbox('offlinequiz/enable_' . $qtype,
+                get_string('enable_qtype', 'offlinequiz', $qtype = get_string('pluginname', 'qtype_' . $qtype)),
+                get_string('enable_qtype_description', 'offlinequiz', $qtype), $configuration, $configuration, 0));
+    }
 }
diff --git a/version.php b/version.php
index 3ab573b..11146ee 100644
--- a/version.php
+++ b/version.php
@@ -30,8 +30,8 @@
 
 defined('MOODLE_INTERNAL') || die();
 
-$plugin->version  = 2016072300;
-$plugin->release   = "v3.1.0";      // User-friendly version number.
+$plugin->version  = 2016072300.01;
+$plugin->release   = "v3.1.0.01";      // User-friendly version number.
 $plugin->maturity  = MATURITY_STABLE;
 $plugin->requires = 2016052300 ;         // Requires this Moodle version.
 $plugin->cron     = 3600;               // Period for cron to check this plugin (secs).
diff --git a/yui/build/moodle-mod_offlinequiz-questionchooser/moodle-mod_offlinequiz-questionchooser-debug.js b/yui/build/moodle-mod_offlinequiz-questionchooser/moodle-mod_offlinequiz-questionchooser-debug.js
index 61b4e58..ca7ad9c 100644
--- a/yui/build/moodle-mod_offlinequiz-questionchooser/moodle-mod_offlinequiz-questionchooser-debug.js
+++ b/yui/build/moodle-mod_offlinequiz-questionchooser/moodle-mod_offlinequiz-questionchooser-debug.js
@@ -16,7 +16,9 @@ var CSS = {
  * @protected
  * @extends M.core.chooserdialogue
  */
-var QUESTIONCHOOSER = function() {
+var QUESTIONCHOOSER = function(enabled_qtypes) {
+
+    this.enabled_qtypes= enabled_qtypes;
     QUESTIONCHOOSER.superclass.constructor.apply(this, arguments);
 };
 
@@ -49,13 +51,9 @@ Y.extend(QUESTIONCHOOSER, M.core.chooserdialogue, {
         this.display_chooser(e);
 
         var nodes = Y.all('#chooseform input[type=radio]')._nodes;
-        console.log(nodes);
         for(i = 0; i < nodes.length; i++) {
-        	if (nodes[i].id != 'qtype_qtype_multichoiceset' &&
-        		nodes[i].id != 'qtype_qtype_multichoice' &&
-        		nodes[i].id != 'qtype_qtype_description' ) {
-        		nodes[i].disabled = true;
-        	}
+
+            nodes[i].disabled= (nodes[i].id != 'qtype_qtype_description') && (this.enabled_qtypes.indexOf(nodes[i].id.substr(12)) == -1);
         }
     },
 
@@ -78,8 +76,9 @@ Y.extend(QUESTIONCHOOSER, M.core.chooserdialogue, {
 });
 
 M.mod_offlinequiz = M.mod_offlinequiz || {};
-M.mod_offlinequiz.init_questionchooser = function() {
-    M.mod_offlinequiz.question_chooser = new QUESTIONCHOOSER({});
+M.mod_offlinequiz.init_questionchooser = function(enabled_qtypes) {
+
+    M.mod_offlinequiz.question_chooser = new QUESTIONCHOOSER(enabled_qtypes);
     return M.mod_offlinequiz.question_chooser;
 };
 
diff --git a/yui/build/moodle-mod_offlinequiz-questionchooser/moodle-mod_offlinequiz-questionchooser-min.js b/yui/build/moodle-mod_offlinequiz-questionchooser/moodle-mod_offlinequiz-questionchooser-min.js
dissimilarity index 89%
index 6e355b9..0130a4d 100644
--- a/yui/build/moodle-mod_offlinequiz-questionchooser/moodle-mod_offlinequiz-questionchooser-min.js
+++ b/yui/build/moodle-mod_offlinequiz-questionchooser/moodle-mod_offlinequiz-questionchooser-min.js
@@ -1 +1 @@
-YUI.add("moodle-mod_offlinequiz-questionchooser",function(e,t){var n={ADDNEWQUESTIONBUTTONS:"ul.menu a.addquestion",CREATENEWQUESTION:"div.createnewquestion",CHOOSERDIALOGUE:"div.chooserdialogue",CHOOSERHEADER:"div.choosertitle"},r=function(){r.superclass.constructor.apply(this,arguments)};e.extend(r,M.core.chooserdialogue,{initializer:function(){e.one("body").delegate("click",this.display_dialogue,n.ADDNEWQUESTIONBUTTONS,this)},display_dialogue:function(t){t.preventDefault();var r=e.one(n.CREATENEWQUESTION+" "+n.CHOOSERDIALOGUE),s=e.one(n.CREATENEWQUESTION+" "+n.CHOOSERHEADER);this.container===null&&(this.setup_chooser_dialogue(r,s,{}),this.prepare_chooser());var o=e.QueryString.parse(t.currentTarget.get("search").substring(1)),u=this.container.one("form");this.parameters_to_hidden_input(o,u,"returnurl"),this.parameters_to_hidden_input(o,u,"cmid"),this.parameters_to_hidden_input(o,u,"category"),this.parameters_to_hidden_input(o,u,"addonpage"),this.parameters_to_hidden_input(o,u,"appendqnumstring"),this.display_chooser(t);var a=e.all("#chooseform input[type=radio]")._nodes;console.log(a);for(i=0;i<a.length;i++)a[i].id!="qtype_qtype_multichoiceset"&&a[i].id!="qtype_qtype_multichoice"&&a[i].id!="qtype_qtype_description"&&(a[i].disabled=!0)},parameters_to_hidden_input:function(e,t,n){var r;e.hasOwnProperty(n)?r=e[n]:r="";var i=t.one("input[name="+n+"]");i||(i=t.appendChild('<input type="hidden">'),i.set("name",n)),i.set("value",r)}},{NAME:"mod_offlinequiz-questionchooser"}),M.mod_offlinequiz=M.mod_offlinequiz||{},M.mod_offlinequiz.init_questionchooser=function(){return M.mod_offlinequiz.question_chooser=new r({}),M.mod_offlinequiz.question_chooser}},"@VERSION@",{requires:["moodle-core-chooserdialogue","moodle-mod_offlinequiz-util","querystring-parse"]});
+YUI.add("moodle-mod_offlinequiz-questionchooser",function(e,t){var n={ADDNEWQUESTIONBUTTONS:"ul.menu a.addquestion",CREATENEWQUESTION:"div.createnewquestion",CHOOSERDIALOGUE:"div.chooserdialogue",CHOOSERHEADER:"div.choosertitle"},r=function(e){this.enabled_qtypes=e,r.superclass.constructor.apply(this,arguments)};e.extend(r,M.core.chooserdialogue,{initializer:function(){e.one("body").delegate("click",this.display_dialogue,n.ADDNEWQUESTIONBUTTONS,this)},display_dialogue:function(t){t.preventDefault();var r=e.one(n.CREATENEWQUESTION+" "+n.CHOOSERDIALOGUE),s=e.one(n.CREATENEWQUESTION+" "+n.CHOOSERHEADER);this.container===null&&(this.setup_chooser_dialogue(r,s,{}),this.prepare_chooser());var o=e.QueryString.parse(t.currentTarget.get("search").substring(1)),u=this.container.one("form");this.parameters_to_hidden_input(o,u,"returnurl"),this.parameters_to_hidden_input(o,u,"cmid"),this.parameters_to_hidden_input(o,u,"category"),this.parameters_to_hidden_input(o,u,"addonpage"),this.parameters_to_hidden_input(o,u,"appendqnumstring"),this.display_chooser(t);var a=e.all("#chooseform input[type=radio]")._nodes;for(i=0;i<a.length;i++)a[i].disabled=a[i].id!="qtype_qtype_description"&&this.enabled_qtypes.indexOf(a[i].id.substr(12))==-1},parameters_to_hidden_input:function(e,t,n){var r;e.hasOwnProperty(n)?r=e[n]:r="";var i=t.one("input[name="+n+"]");i||(i=t.appendChild('<input type="hidden">'),i.set("name",n)),i.set("value",r)}},{NAME:"mod_offlinequiz-questionchooser"}),M.mod_offlinequiz=M.mod_offlinequiz||{},M.mod_offlinequiz.init_questionchooser=function(e){return M.mod_offlinequiz.question_chooser=new r(e),M.mod_offlinequiz.question_chooser}},"@VERSION@",{requires:["moodle-core-chooserdialogue","moodle-mod_offlinequiz-util","querystring-parse"]});
diff --git a/yui/build/moodle-mod_offlinequiz-questionchooser/moodle-mod_offlinequiz-questionchooser.js b/yui/build/moodle-mod_offlinequiz-questionchooser/moodle-mod_offlinequiz-questionchooser.js
index 61b4e58..ca7ad9c 100644
--- a/yui/build/moodle-mod_offlinequiz-questionchooser/moodle-mod_offlinequiz-questionchooser.js
+++ b/yui/build/moodle-mod_offlinequiz-questionchooser/moodle-mod_offlinequiz-questionchooser.js
@@ -16,7 +16,9 @@ var CSS = {
  * @protected
  * @extends M.core.chooserdialogue
  */
-var QUESTIONCHOOSER = function() {
+var QUESTIONCHOOSER = function(enabled_qtypes) {
+
+    this.enabled_qtypes= enabled_qtypes;
     QUESTIONCHOOSER.superclass.constructor.apply(this, arguments);
 };
 
@@ -49,13 +51,9 @@ Y.extend(QUESTIONCHOOSER, M.core.chooserdialogue, {
         this.display_chooser(e);
 
         var nodes = Y.all('#chooseform input[type=radio]')._nodes;
-        console.log(nodes);
         for(i = 0; i < nodes.length; i++) {
-        	if (nodes[i].id != 'qtype_qtype_multichoiceset' &&
-        		nodes[i].id != 'qtype_qtype_multichoice' &&
-        		nodes[i].id != 'qtype_qtype_description' ) {
-        		nodes[i].disabled = true;
-        	}
+
+            nodes[i].disabled= (nodes[i].id != 'qtype_qtype_description') && (this.enabled_qtypes.indexOf(nodes[i].id.substr(12)) == -1);
         }
     },
 
@@ -78,8 +76,9 @@ Y.extend(QUESTIONCHOOSER, M.core.chooserdialogue, {
 });
 
 M.mod_offlinequiz = M.mod_offlinequiz || {};
-M.mod_offlinequiz.init_questionchooser = function() {
-    M.mod_offlinequiz.question_chooser = new QUESTIONCHOOSER({});
+M.mod_offlinequiz.init_questionchooser = function(enabled_qtypes) {
+
+    M.mod_offlinequiz.question_chooser = new QUESTIONCHOOSER(enabled_qtypes);
     return M.mod_offlinequiz.question_chooser;
 };
 
diff --git a/yui/src/questionchooser/js/questionchooser.js b/yui/src/questionchooser/js/questionchooser.js
index 0698961..8727ef4 100644
--- a/yui/src/questionchooser/js/questionchooser.js
+++ b/yui/src/questionchooser/js/questionchooser.js
@@ -14,7 +14,9 @@ var CSS = {
  * @protected
  * @extends M.core.chooserdialogue
  */
-var QUESTIONCHOOSER = function() {
+var QUESTIONCHOOSER = function(enabled_qtypes) {
+
+    this.enabled_qtypes= enabled_qtypes;
     QUESTIONCHOOSER.superclass.constructor.apply(this, arguments);
 };
 
@@ -48,11 +50,8 @@ Y.extend(QUESTIONCHOOSER, M.core.chooserdialogue, {
 
         var nodes = Y.all('#chooseform input[type=radio]')._nodes;
         for(i = 0; i < nodes.length; i++) {
-        	if (nodes[i].id != 'qtype_qtype_multichoiceset' &&
-        		nodes[i].id != 'qtype_qtype_multichoice' &&
-        		nodes[i].id != 'qtype_qtype_description' ) {
-        		nodes[i].disabled = true;
-        	}
+
+            nodes[i].disabled= (nodes[i].id != 'qtype_qtype_description') && (this.enabled_qtypes.indexOf(nodes[i].id.substr(12)) == -1);
         }
     },
 
@@ -75,7 +74,8 @@ Y.extend(QUESTIONCHOOSER, M.core.chooserdialogue, {
 });
 
 M.mod_offlinequiz = M.mod_offlinequiz || {};
-M.mod_offlinequiz.init_questionchooser = function() {
-    M.mod_offlinequiz.question_chooser = new QUESTIONCHOOSER({});
+M.mod_offlinequiz.init_questionchooser = function(enabled_qtypes) {
+
+    M.mod_offlinequiz.question_chooser = new QUESTIONCHOOSER(enabled_qtypes);
     return M.mod_offlinequiz.question_chooser;
 };
